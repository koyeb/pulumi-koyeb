# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetDomainResult',
    'AwaitableGetDomainResult',
    'get_domain',
    'get_domain_output',
]

@pulumi.output_type
class GetDomainResult:
    """
    A collection of values returned by getDomain.
    """
    def __init__(__self__, app_name=None, created_at=None, deployment_group=None, id=None, intended_cname=None, messages=None, name=None, organization_id=None, status=None, type=None, updated_at=None, verified_at=None, version=None):
        if app_name and not isinstance(app_name, str):
            raise TypeError("Expected argument 'app_name' to be a str")
        pulumi.set(__self__, "app_name", app_name)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if deployment_group and not isinstance(deployment_group, str):
            raise TypeError("Expected argument 'deployment_group' to be a str")
        pulumi.set(__self__, "deployment_group", deployment_group)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if intended_cname and not isinstance(intended_cname, str):
            raise TypeError("Expected argument 'intended_cname' to be a str")
        pulumi.set(__self__, "intended_cname", intended_cname)
        if messages and not isinstance(messages, str):
            raise TypeError("Expected argument 'messages' to be a str")
        pulumi.set(__self__, "messages", messages)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if organization_id and not isinstance(organization_id, str):
            raise TypeError("Expected argument 'organization_id' to be a str")
        pulumi.set(__self__, "organization_id", organization_id)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)
        if verified_at and not isinstance(verified_at, str):
            raise TypeError("Expected argument 'verified_at' to be a str")
        pulumi.set(__self__, "verified_at", verified_at)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> Optional[str]:
        """
        The app name the domain is assigned to
        """
        return pulumi.get(self, "app_name")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        The date and time of when the domain was created
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="deploymentGroup")
    def deployment_group(self) -> str:
        """
        The deployment group assigned to the domain
        """
        return pulumi.get(self, "deployment_group")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The domain ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="intendedCname")
    def intended_cname(self) -> str:
        """
        The CNAME record to point the domain to
        """
        return pulumi.get(self, "intended_cname")

    @property
    @pulumi.getter
    def messages(self) -> str:
        """
        The status messages of the domain
        """
        return pulumi.get(self, "messages")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The domain name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> str:
        """
        The organization ID owning the domain
        """
        return pulumi.get(self, "organization_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the domain
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The domain type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        The date and time of when the domain was last updated
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="verifiedAt")
    def verified_at(self) -> str:
        """
        The date and time of when the domain was last verified
        """
        return pulumi.get(self, "verified_at")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The version of the domain
        """
        return pulumi.get(self, "version")


class AwaitableGetDomainResult(GetDomainResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDomainResult(
            app_name=self.app_name,
            created_at=self.created_at,
            deployment_group=self.deployment_group,
            id=self.id,
            intended_cname=self.intended_cname,
            messages=self.messages,
            name=self.name,
            organization_id=self.organization_id,
            status=self.status,
            type=self.type,
            updated_at=self.updated_at,
            verified_at=self.verified_at,
            version=self.version)


def get_domain(app_name: Optional[str] = None,
               deployment_group: Optional[str] = None,
               intended_cname: Optional[str] = None,
               messages: Optional[str] = None,
               name: Optional[str] = None,
               verified_at: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDomainResult:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_koyeb as koyeb

    my_domain = koyeb.get_domain(name="www.exampled.tld")
    ```


    :param str app_name: The app name the domain is assigned to
    :param str deployment_group: The deployment group assigned to the domain
    :param str intended_cname: The CNAME record to point the domain to
    :param str messages: The status messages of the domain
    :param str name: The domain name
    :param str verified_at: The date and time of when the domain was last verified
    """
    __args__ = dict()
    __args__['appName'] = app_name
    __args__['deploymentGroup'] = deployment_group
    __args__['intendedCname'] = intended_cname
    __args__['messages'] = messages
    __args__['name'] = name
    __args__['verifiedAt'] = verified_at
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('koyeb:index/getDomain:getDomain', __args__, opts=opts, typ=GetDomainResult).value

    return AwaitableGetDomainResult(
        app_name=__ret__.app_name,
        created_at=__ret__.created_at,
        deployment_group=__ret__.deployment_group,
        id=__ret__.id,
        intended_cname=__ret__.intended_cname,
        messages=__ret__.messages,
        name=__ret__.name,
        organization_id=__ret__.organization_id,
        status=__ret__.status,
        type=__ret__.type,
        updated_at=__ret__.updated_at,
        verified_at=__ret__.verified_at,
        version=__ret__.version)


@_utilities.lift_output_func(get_domain)
def get_domain_output(app_name: Optional[pulumi.Input[Optional[str]]] = None,
                      deployment_group: Optional[pulumi.Input[Optional[str]]] = None,
                      intended_cname: Optional[pulumi.Input[Optional[str]]] = None,
                      messages: Optional[pulumi.Input[Optional[str]]] = None,
                      name: Optional[pulumi.Input[str]] = None,
                      verified_at: Optional[pulumi.Input[Optional[str]]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDomainResult]:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_koyeb as koyeb

    my_domain = koyeb.get_domain(name="www.exampled.tld")
    ```


    :param str app_name: The app name the domain is assigned to
    :param str deployment_group: The deployment group assigned to the domain
    :param str intended_cname: The CNAME record to point the domain to
    :param str messages: The status messages of the domain
    :param str name: The domain name
    :param str verified_at: The date and time of when the domain was last verified
    """
    ...
