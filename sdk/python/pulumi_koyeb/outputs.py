# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'KoyebAppDomain',
    'KoyebSecretAzureContainerRegistry',
    'KoyebSecretDigitalOceanContainerRegistry',
    'KoyebSecretDockerHubRegistry',
    'KoyebSecretGithubRegistry',
    'KoyebSecretGitlabRegistry',
    'KoyebSecretPrivateRegistry',
    'KoyebServiceDefinition',
    'KoyebServiceDefinitionDocker',
    'KoyebServiceDefinitionEnv',
    'KoyebServiceDefinitionGit',
    'KoyebServiceDefinitionInstanceTypes',
    'KoyebServiceDefinitionPort',
    'KoyebServiceDefinitionRoute',
    'KoyebServiceDefinitionScalings',
    'GetAppDomainResult',
    'GetSecretAzureContainerRegistryResult',
    'GetSecretDigitalOceanContainerRegistryResult',
    'GetSecretDockerHubRegistryResult',
    'GetSecretGithubRegistryResult',
    'GetSecretGitlabRegistryResult',
    'GetSecretPrivateRegistryResult',
]

@pulumi.output_type
class KoyebAppDomain(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appName":
            suggest = "app_name"
        elif key == "createdAt":
            suggest = "created_at"
        elif key == "deploymentGroup":
            suggest = "deployment_group"
        elif key == "intendedCname":
            suggest = "intended_cname"
        elif key == "organizationId":
            suggest = "organization_id"
        elif key == "updatedAt":
            suggest = "updated_at"
        elif key == "verifiedAt":
            suggest = "verified_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KoyebAppDomain. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KoyebAppDomain.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KoyebAppDomain.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 app_name: Optional[str] = None,
                 created_at: Optional[str] = None,
                 deployment_group: Optional[str] = None,
                 id: Optional[str] = None,
                 intended_cname: Optional[str] = None,
                 messages: Optional[str] = None,
                 organization_id: Optional[str] = None,
                 status: Optional[str] = None,
                 type: Optional[str] = None,
                 updated_at: Optional[str] = None,
                 verified_at: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str name: The app name
        :param str created_at: The date and time of when the app was created
        :param str id: The app ID
        :param str organization_id: The organization ID owning the app
        :param str updated_at: The date and time of when the app was last updated
        """
        pulumi.set(__self__, "name", name)
        if app_name is not None:
            pulumi.set(__self__, "app_name", app_name)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if deployment_group is not None:
            pulumi.set(__self__, "deployment_group", deployment_group)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if intended_cname is not None:
            pulumi.set(__self__, "intended_cname", intended_cname)
        if messages is not None:
            pulumi.set(__self__, "messages", messages)
        if organization_id is not None:
            pulumi.set(__self__, "organization_id", organization_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if verified_at is not None:
            pulumi.set(__self__, "verified_at", verified_at)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The app name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> Optional[str]:
        return pulumi.get(self, "app_name")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        The date and time of when the app was created
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="deploymentGroup")
    def deployment_group(self) -> Optional[str]:
        return pulumi.get(self, "deployment_group")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The app ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="intendedCname")
    def intended_cname(self) -> Optional[str]:
        return pulumi.get(self, "intended_cname")

    @property
    @pulumi.getter
    def messages(self) -> Optional[str]:
        return pulumi.get(self, "messages")

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> Optional[str]:
        """
        The organization ID owning the app
        """
        return pulumi.get(self, "organization_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[str]:
        """
        The date and time of when the app was last updated
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="verifiedAt")
    def verified_at(self) -> Optional[str]:
        return pulumi.get(self, "verified_at")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class KoyebSecretAzureContainerRegistry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "registryName":
            suggest = "registry_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KoyebSecretAzureContainerRegistry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KoyebSecretAzureContainerRegistry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KoyebSecretAzureContainerRegistry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 password: str,
                 registry_name: str,
                 username: str):
        """
        :param str password: The registry password
        :param str registry_name: The registry name
        :param str username: The registry username
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "registry_name", registry_name)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        The registry password
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="registryName")
    def registry_name(self) -> str:
        """
        The registry name
        """
        return pulumi.get(self, "registry_name")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The registry username
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class KoyebSecretDigitalOceanContainerRegistry(dict):
    def __init__(__self__, *,
                 password: str,
                 username: str):
        """
        :param str password: The registry password
        :param str username: The registry username
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        The registry password
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The registry username
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class KoyebSecretDockerHubRegistry(dict):
    def __init__(__self__, *,
                 password: str,
                 username: str):
        """
        :param str password: The registry password
        :param str username: The registry username
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        The registry password
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The registry username
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class KoyebSecretGithubRegistry(dict):
    def __init__(__self__, *,
                 password: str,
                 username: str):
        """
        :param str password: The registry password
        :param str username: The registry username
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        The registry password
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The registry username
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class KoyebSecretGitlabRegistry(dict):
    def __init__(__self__, *,
                 password: str,
                 username: str):
        """
        :param str password: The registry password
        :param str username: The registry username
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        The registry password
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The registry username
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class KoyebSecretPrivateRegistry(dict):
    def __init__(__self__, *,
                 password: str,
                 url: str,
                 username: str):
        """
        :param str password: The registry password
        :param str url: The registry url
        :param str username: The registry username
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "url", url)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        The registry password
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The registry url
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The registry username
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class KoyebServiceDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceTypes":
            suggest = "instance_types"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KoyebServiceDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KoyebServiceDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KoyebServiceDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_types: 'outputs.KoyebServiceDefinitionInstanceTypes',
                 name: str,
                 ports: Sequence['outputs.KoyebServiceDefinitionPort'],
                 regions: Sequence[str],
                 scalings: 'outputs.KoyebServiceDefinitionScalings',
                 docker: Optional['outputs.KoyebServiceDefinitionDocker'] = None,
                 envs: Optional[Sequence['outputs.KoyebServiceDefinitionEnv']] = None,
                 git: Optional['outputs.KoyebServiceDefinitionGit'] = None,
                 routes: Optional[Sequence['outputs.KoyebServiceDefinitionRoute']] = None):
        """
        :param str name: The service name
        :param Sequence[str] regions: The service deployment regions to deploy to
        """
        pulumi.set(__self__, "instance_types", instance_types)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ports", ports)
        pulumi.set(__self__, "regions", regions)
        pulumi.set(__self__, "scalings", scalings)
        if docker is not None:
            pulumi.set(__self__, "docker", docker)
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if git is not None:
            pulumi.set(__self__, "git", git)
        if routes is not None:
            pulumi.set(__self__, "routes", routes)

    @property
    @pulumi.getter(name="instanceTypes")
    def instance_types(self) -> 'outputs.KoyebServiceDefinitionInstanceTypes':
        return pulumi.get(self, "instance_types")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The service name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ports(self) -> Sequence['outputs.KoyebServiceDefinitionPort']:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter
    def regions(self) -> Sequence[str]:
        """
        The service deployment regions to deploy to
        """
        return pulumi.get(self, "regions")

    @property
    @pulumi.getter
    def scalings(self) -> 'outputs.KoyebServiceDefinitionScalings':
        return pulumi.get(self, "scalings")

    @property
    @pulumi.getter
    def docker(self) -> Optional['outputs.KoyebServiceDefinitionDocker']:
        return pulumi.get(self, "docker")

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.KoyebServiceDefinitionEnv']]:
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter
    def git(self) -> Optional['outputs.KoyebServiceDefinitionGit']:
        return pulumi.get(self, "git")

    @property
    @pulumi.getter
    def routes(self) -> Optional[Sequence['outputs.KoyebServiceDefinitionRoute']]:
        return pulumi.get(self, "routes")


@pulumi.output_type
class KoyebServiceDefinitionDocker(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageRegistySecret":
            suggest = "image_registy_secret"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KoyebServiceDefinitionDocker. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KoyebServiceDefinitionDocker.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KoyebServiceDefinitionDocker.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image: str,
                 args: Optional[Sequence[str]] = None,
                 command: Optional[str] = None,
                 image_registy_secret: Optional[str] = None):
        pulumi.set(__self__, "image", image)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if image_registy_secret is not None:
            pulumi.set(__self__, "image_registy_secret", image_registy_secret)

    @property
    @pulumi.getter
    def image(self) -> str:
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def args(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "args")

    @property
    @pulumi.getter
    def command(self) -> Optional[str]:
        return pulumi.get(self, "command")

    @property
    @pulumi.getter(name="imageRegistySecret")
    def image_registy_secret(self) -> Optional[str]:
        return pulumi.get(self, "image_registy_secret")


@pulumi.output_type
class KoyebServiceDefinitionEnv(dict):
    def __init__(__self__, *,
                 key: str,
                 secret: Optional[str] = None,
                 value: Optional[str] = None):
        pulumi.set(__self__, "key", key)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def secret(self) -> Optional[str]:
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class KoyebServiceDefinitionGit(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "buildCommand":
            suggest = "build_command"
        elif key == "noDeployOnPush":
            suggest = "no_deploy_on_push"
        elif key == "runCommand":
            suggest = "run_command"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KoyebServiceDefinitionGit. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KoyebServiceDefinitionGit.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KoyebServiceDefinitionGit.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 branch: str,
                 repository: str,
                 build_command: Optional[str] = None,
                 no_deploy_on_push: Optional[bool] = None,
                 run_command: Optional[str] = None):
        pulumi.set(__self__, "branch", branch)
        pulumi.set(__self__, "repository", repository)
        if build_command is not None:
            pulumi.set(__self__, "build_command", build_command)
        if no_deploy_on_push is not None:
            pulumi.set(__self__, "no_deploy_on_push", no_deploy_on_push)
        if run_command is not None:
            pulumi.set(__self__, "run_command", run_command)

    @property
    @pulumi.getter
    def branch(self) -> str:
        return pulumi.get(self, "branch")

    @property
    @pulumi.getter
    def repository(self) -> str:
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="buildCommand")
    def build_command(self) -> Optional[str]:
        return pulumi.get(self, "build_command")

    @property
    @pulumi.getter(name="noDeployOnPush")
    def no_deploy_on_push(self) -> Optional[bool]:
        return pulumi.get(self, "no_deploy_on_push")

    @property
    @pulumi.getter(name="runCommand")
    def run_command(self) -> Optional[str]:
        return pulumi.get(self, "run_command")


@pulumi.output_type
class KoyebServiceDefinitionInstanceTypes(dict):
    def __init__(__self__, *,
                 type: str):
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class KoyebServiceDefinitionPort(dict):
    def __init__(__self__, *,
                 port: int,
                 protocol: str):
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")


@pulumi.output_type
class KoyebServiceDefinitionRoute(dict):
    def __init__(__self__, *,
                 path: str,
                 port: int):
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")


@pulumi.output_type
class KoyebServiceDefinitionScalings(dict):
    def __init__(__self__, *,
                 max: Optional[int] = None,
                 min: Optional[int] = None):
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> Optional[int]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[int]:
        return pulumi.get(self, "min")


@pulumi.output_type
class GetAppDomainResult(dict):
    def __init__(__self__, *,
                 created_at: str,
                 deployment_group: str,
                 id: str,
                 intended_cname: str,
                 messages: str,
                 name: str,
                 organization_id: str,
                 status: str,
                 type: str,
                 updated_at: str,
                 verified_at: str,
                 version: str,
                 app_name: Optional[str] = None):
        """
        :param str created_at: The date and time of when the app was created
        :param str id: The app ID
        :param str name: The app name
        :param str organization_id: The organization ID owning the app
        :param str updated_at: The date and time of when the app was last updated
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "deployment_group", deployment_group)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "intended_cname", intended_cname)
        pulumi.set(__self__, "messages", messages)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "organization_id", organization_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "verified_at", verified_at)
        pulumi.set(__self__, "version", version)
        if app_name is not None:
            pulumi.set(__self__, "app_name", app_name)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        The date and time of when the app was created
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="deploymentGroup")
    def deployment_group(self) -> str:
        return pulumi.get(self, "deployment_group")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The app ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="intendedCname")
    def intended_cname(self) -> str:
        return pulumi.get(self, "intended_cname")

    @property
    @pulumi.getter
    def messages(self) -> str:
        return pulumi.get(self, "messages")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The app name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> str:
        """
        The organization ID owning the app
        """
        return pulumi.get(self, "organization_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        The date and time of when the app was last updated
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="verifiedAt")
    def verified_at(self) -> str:
        return pulumi.get(self, "verified_at")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> Optional[str]:
        return pulumi.get(self, "app_name")


@pulumi.output_type
class GetSecretAzureContainerRegistryResult(dict):
    def __init__(__self__, *,
                 password: str,
                 registry_name: str,
                 username: str):
        """
        :param str password: The registry password
        :param str registry_name: The registry name
        :param str username: The registry username
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "registry_name", registry_name)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        The registry password
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="registryName")
    def registry_name(self) -> str:
        """
        The registry name
        """
        return pulumi.get(self, "registry_name")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The registry username
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class GetSecretDigitalOceanContainerRegistryResult(dict):
    def __init__(__self__, *,
                 password: str,
                 username: str):
        """
        :param str password: The registry password
        :param str username: The registry username
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        The registry password
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The registry username
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class GetSecretDockerHubRegistryResult(dict):
    def __init__(__self__, *,
                 password: str,
                 username: str):
        """
        :param str password: The registry password
        :param str username: The registry username
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        The registry password
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The registry username
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class GetSecretGithubRegistryResult(dict):
    def __init__(__self__, *,
                 password: str,
                 username: str):
        """
        :param str password: The registry password
        :param str username: The registry username
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        The registry password
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The registry username
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class GetSecretGitlabRegistryResult(dict):
    def __init__(__self__, *,
                 password: str,
                 username: str):
        """
        :param str password: The registry password
        :param str username: The registry username
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        The registry password
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The registry username
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class GetSecretPrivateRegistryResult(dict):
    def __init__(__self__, *,
                 password: str,
                 url: str,
                 username: str):
        """
        :param str password: The registry password
        :param str url: The registry url
        :param str username: The registry username
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "url", url)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        The registry password
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The registry url
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The registry username
        """
        return pulumi.get(self, "username")


