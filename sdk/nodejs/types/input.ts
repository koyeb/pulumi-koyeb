// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

export interface GetSecretAzureContainerRegistry {
    /**
     * The registry password
     */
    password: string;
    /**
     * The registry name
     */
    registryName: string;
    /**
     * The registry username
     */
    username: string;
}

export interface GetSecretAzureContainerRegistryArgs {
    /**
     * The registry password
     */
    password: pulumi.Input<string>;
    /**
     * The registry name
     */
    registryName: pulumi.Input<string>;
    /**
     * The registry username
     */
    username: pulumi.Input<string>;
}

export interface GetSecretDigitalOceanContainerRegistry {
    /**
     * The registry password
     */
    password: string;
    /**
     * The registry username
     */
    username: string;
}

export interface GetSecretDigitalOceanContainerRegistryArgs {
    /**
     * The registry password
     */
    password: pulumi.Input<string>;
    /**
     * The registry username
     */
    username: pulumi.Input<string>;
}

export interface GetSecretDockerHubRegistry {
    /**
     * The registry password
     */
    password: string;
    /**
     * The registry username
     */
    username: string;
}

export interface GetSecretDockerHubRegistryArgs {
    /**
     * The registry password
     */
    password: pulumi.Input<string>;
    /**
     * The registry username
     */
    username: pulumi.Input<string>;
}

export interface GetSecretGithubRegistryArgs {
    /**
     * The registry password
     */
    password: pulumi.Input<string>;
    /**
     * The registry username
     */
    username: pulumi.Input<string>;
}

export interface GetSecretGithubRegistry {
    /**
     * The registry password
     */
    password: string;
    /**
     * The registry username
     */
    username: string;
}

export interface GetSecretGitlabRegistryArgs {
    /**
     * The registry password
     */
    password: pulumi.Input<string>;
    /**
     * The registry username
     */
    username: pulumi.Input<string>;
}

export interface GetSecretGitlabRegistry {
    /**
     * The registry password
     */
    password: string;
    /**
     * The registry username
     */
    username: string;
}

export interface GetSecretPrivateRegistryArgs {
    /**
     * The registry password
     */
    password: pulumi.Input<string>;
    /**
     * The registry url
     */
    url: pulumi.Input<string>;
    /**
     * The registry username
     */
    username: pulumi.Input<string>;
}

export interface GetSecretPrivateRegistry {
    /**
     * The registry password
     */
    password: string;
    /**
     * The registry url
     */
    url: string;
    /**
     * The registry username
     */
    username: string;
}

export interface KoyebAppDomain {
    appName?: pulumi.Input<string>;
    /**
     * The date and time of when the app was created
     */
    createdAt?: pulumi.Input<string>;
    deploymentGroup?: pulumi.Input<string>;
    /**
     * The app ID
     */
    id?: pulumi.Input<string>;
    intendedCname?: pulumi.Input<string>;
    messages?: pulumi.Input<string>;
    /**
     * The app name
     */
    name: pulumi.Input<string>;
    /**
     * The organization ID owning the app
     */
    organizationId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    /**
     * The date and time of when the app was last updated
     */
    updatedAt?: pulumi.Input<string>;
    verifiedAt?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}

export interface KoyebSecretAzureContainerRegistry {
    /**
     * The registry password
     */
    password: pulumi.Input<string>;
    /**
     * The registry name
     */
    registryName: pulumi.Input<string>;
    /**
     * The registry username
     */
    username: pulumi.Input<string>;
}

export interface KoyebSecretDigitalOceanContainerRegistry {
    /**
     * The registry password
     */
    password: pulumi.Input<string>;
    /**
     * The registry username
     */
    username: pulumi.Input<string>;
}

export interface KoyebSecretDockerHubRegistry {
    /**
     * The registry password
     */
    password: pulumi.Input<string>;
    /**
     * The registry username
     */
    username: pulumi.Input<string>;
}

export interface KoyebSecretGithubRegistry {
    /**
     * The registry password
     */
    password: pulumi.Input<string>;
    /**
     * The registry username
     */
    username: pulumi.Input<string>;
}

export interface KoyebSecretGitlabRegistry {
    /**
     * The registry password
     */
    password: pulumi.Input<string>;
    /**
     * The registry username
     */
    username: pulumi.Input<string>;
}

export interface KoyebSecretPrivateRegistry {
    /**
     * The registry password
     */
    password: pulumi.Input<string>;
    /**
     * The registry url
     */
    url: pulumi.Input<string>;
    /**
     * The registry username
     */
    username: pulumi.Input<string>;
}

export interface KoyebServiceDefinition {
    docker?: pulumi.Input<inputs.KoyebServiceDefinitionDocker>;
    envs?: pulumi.Input<pulumi.Input<inputs.KoyebServiceDefinitionEnv>[]>;
    git?: pulumi.Input<inputs.KoyebServiceDefinitionGit>;
    healthChecks?: pulumi.Input<pulumi.Input<inputs.KoyebServiceDefinitionHealthCheck>[]>;
    instanceTypes: pulumi.Input<pulumi.Input<inputs.KoyebServiceDefinitionInstanceType>[]>;
    /**
     * The service name
     */
    name: pulumi.Input<string>;
    ports: pulumi.Input<pulumi.Input<inputs.KoyebServiceDefinitionPort>[]>;
    /**
     * The service deployment regions to deploy to
     */
    regions: pulumi.Input<pulumi.Input<string>[]>;
    routes?: pulumi.Input<pulumi.Input<inputs.KoyebServiceDefinitionRoute>[]>;
    scalings: pulumi.Input<pulumi.Input<inputs.KoyebServiceDefinitionScaling>[]>;
    /**
     * If set to true, the service will be deployed without using the cache
     */
    skipCache?: pulumi.Input<boolean>;
    /**
     * The service type, either WEB or WORKER (default WEB)
     */
    type?: pulumi.Input<string>;
}

export interface KoyebServiceDefinitionDocker {
    args?: pulumi.Input<pulumi.Input<string>[]>;
    command?: pulumi.Input<string>;
    entrypoints?: pulumi.Input<pulumi.Input<string>[]>;
    image: pulumi.Input<string>;
    imageRegistrySecret?: pulumi.Input<string>;
    privileged?: pulumi.Input<boolean>;
}

export interface KoyebServiceDefinitionEnv {
    key: pulumi.Input<string>;
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    secret?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface KoyebServiceDefinitionGit {
    branch: pulumi.Input<string>;
    buildpack?: pulumi.Input<inputs.KoyebServiceDefinitionGitBuildpack>;
    dockerfile?: pulumi.Input<inputs.KoyebServiceDefinitionGitDockerfile>;
    noDeployOnPush?: pulumi.Input<boolean>;
    repository: pulumi.Input<string>;
    workdir?: pulumi.Input<string>;
}

export interface KoyebServiceDefinitionGitBuildpack {
    buildCommand?: pulumi.Input<string>;
    privileged?: pulumi.Input<boolean>;
    runCommand?: pulumi.Input<string>;
}

export interface KoyebServiceDefinitionGitDockerfile {
    args?: pulumi.Input<pulumi.Input<string>[]>;
    command?: pulumi.Input<string>;
    dockerfile?: pulumi.Input<string>;
    entrypoints?: pulumi.Input<pulumi.Input<string>[]>;
    privileged?: pulumi.Input<boolean>;
    target?: pulumi.Input<string>;
}

export interface KoyebServiceDefinitionHealthCheck {
    gracePeriod?: pulumi.Input<number>;
    http?: pulumi.Input<inputs.KoyebServiceDefinitionHealthCheckHttp>;
    interval?: pulumi.Input<number>;
    restartLimit?: pulumi.Input<number>;
    tcp?: pulumi.Input<inputs.KoyebServiceDefinitionHealthCheckTcp>;
    timeout?: pulumi.Input<number>;
}

export interface KoyebServiceDefinitionHealthCheckHttp {
    headers?: pulumi.Input<pulumi.Input<inputs.KoyebServiceDefinitionHealthCheckHttpHeader>[]>;
    method?: pulumi.Input<string>;
    path: pulumi.Input<string>;
    port: pulumi.Input<number>;
}

export interface KoyebServiceDefinitionHealthCheckHttpHeader {
    key: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface KoyebServiceDefinitionHealthCheckTcp {
    port: pulumi.Input<number>;
}

export interface KoyebServiceDefinitionInstanceType {
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    type: pulumi.Input<string>;
}

export interface KoyebServiceDefinitionPort {
    port: pulumi.Input<number>;
    protocol: pulumi.Input<string>;
}

export interface KoyebServiceDefinitionRoute {
    path: pulumi.Input<string>;
    port: pulumi.Input<number>;
}

export interface KoyebServiceDefinitionScaling {
    max?: pulumi.Input<number>;
    min?: pulumi.Input<number>;
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    targets?: pulumi.Input<pulumi.Input<inputs.KoyebServiceDefinitionScalingTarget>[]>;
}

export interface KoyebServiceDefinitionScalingTarget {
    averageCpus?: pulumi.Input<pulumi.Input<inputs.KoyebServiceDefinitionScalingTargetAverageCpus>[]>;
    averageMems?: pulumi.Input<pulumi.Input<inputs.KoyebServiceDefinitionScalingTargetAverageMem>[]>;
    requestsPerSeconds?: pulumi.Input<pulumi.Input<inputs.KoyebServiceDefinitionScalingTargetRequestsPerSecond>[]>;
}

export interface KoyebServiceDefinitionScalingTargetAverageCpus {
    value: pulumi.Input<number>;
}

export interface KoyebServiceDefinitionScalingTargetAverageMem {
    value: pulumi.Input<number>;
}

export interface KoyebServiceDefinitionScalingTargetRequestsPerSecond {
    value: pulumi.Input<number>;
}
