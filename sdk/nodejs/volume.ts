// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Volume extends pulumi.CustomResource {
    /**
     * Get an existing Volume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VolumeState, opts?: pulumi.CustomResourceOptions): Volume {
        return new Volume(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'koyeb:index/volume:Volume';

    /**
     * Returns true if the given object is an instance of Volume.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Volume {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Volume.__pulumiType;
    }

    /**
     * The backing store of the volume
     */
    public /*out*/ readonly backingStore!: pulumi.Output<string>;
    /**
     * The date and time of when the volume was created
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The current size of the volume in GB
     */
    public /*out*/ readonly curSize!: pulumi.Output<number>;
    /**
     * The maximum size of the volume in GB
     */
    public readonly maxSize!: pulumi.Output<number>;
    /**
     * The volume name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The organization ID owning the volume
     */
    public /*out*/ readonly organizationId!: pulumi.Output<string>;
    /**
     * If set to true, the volume will be mounted in read-only
     */
    public readonly readOnly!: pulumi.Output<boolean | undefined>;
    /**
     * The region where the volume is located
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The service ID the volume is attached to
     */
    public /*out*/ readonly serviceId!: pulumi.Output<string>;
    /**
     * The snapshot ID the volume was created from
     */
    public /*out*/ readonly snapshotId!: pulumi.Output<string>;
    /**
     * The status of the volume
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The date and time of when the volume was last updated
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * The volume type
     */
    public readonly volumeType!: pulumi.Output<string | undefined>;

    /**
     * Create a Volume resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VolumeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VolumeArgs | VolumeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VolumeState | undefined;
            resourceInputs["backingStore"] = state ? state.backingStore : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["curSize"] = state ? state.curSize : undefined;
            resourceInputs["maxSize"] = state ? state.maxSize : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["organizationId"] = state ? state.organizationId : undefined;
            resourceInputs["readOnly"] = state ? state.readOnly : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["serviceId"] = state ? state.serviceId : undefined;
            resourceInputs["snapshotId"] = state ? state.snapshotId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["volumeType"] = state ? state.volumeType : undefined;
        } else {
            const args = argsOrState as VolumeArgs | undefined;
            if ((!args || args.maxSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'maxSize'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            resourceInputs["maxSize"] = args ? args.maxSize : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["readOnly"] = args ? args.readOnly : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["volumeType"] = args ? args.volumeType : undefined;
            resourceInputs["backingStore"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["curSize"] = undefined /*out*/;
            resourceInputs["organizationId"] = undefined /*out*/;
            resourceInputs["serviceId"] = undefined /*out*/;
            resourceInputs["snapshotId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Volume.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Volume resources.
 */
export interface VolumeState {
    /**
     * The backing store of the volume
     */
    backingStore?: pulumi.Input<string>;
    /**
     * The date and time of when the volume was created
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The current size of the volume in GB
     */
    curSize?: pulumi.Input<number>;
    /**
     * The maximum size of the volume in GB
     */
    maxSize?: pulumi.Input<number>;
    /**
     * The volume name
     */
    name?: pulumi.Input<string>;
    /**
     * The organization ID owning the volume
     */
    organizationId?: pulumi.Input<string>;
    /**
     * If set to true, the volume will be mounted in read-only
     */
    readOnly?: pulumi.Input<boolean>;
    /**
     * The region where the volume is located
     */
    region?: pulumi.Input<string>;
    /**
     * The service ID the volume is attached to
     */
    serviceId?: pulumi.Input<string>;
    /**
     * The snapshot ID the volume was created from
     */
    snapshotId?: pulumi.Input<string>;
    /**
     * The status of the volume
     */
    status?: pulumi.Input<string>;
    /**
     * The date and time of when the volume was last updated
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * The volume type
     */
    volumeType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Volume resource.
 */
export interface VolumeArgs {
    /**
     * The maximum size of the volume in GB
     */
    maxSize: pulumi.Input<number>;
    /**
     * The volume name
     */
    name?: pulumi.Input<string>;
    /**
     * If set to true, the volume will be mounted in read-only
     */
    readOnly?: pulumi.Input<boolean>;
    /**
     * The region where the volume is located
     */
    region: pulumi.Input<string>;
    /**
     * The volume type
     */
    volumeType?: pulumi.Input<string>;
}
