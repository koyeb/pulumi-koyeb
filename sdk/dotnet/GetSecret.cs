// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Koyeb
{
    public static class GetSecret
    {
        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Koyeb = Pulumi.Koyeb;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var my_secret = Output.Create(Koyeb.GetSecret.InvokeAsync(new Koyeb.GetSecretArgs
        ///         {
        ///             Name = "my-secret",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetSecretResult> InvokeAsync(GetSecretArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetSecretResult>("koyeb:index/getSecret:getSecret", args ?? new GetSecretArgs(), options.WithDefaults());

        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Koyeb = Pulumi.Koyeb;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var my_secret = Output.Create(Koyeb.GetSecret.InvokeAsync(new Koyeb.GetSecretArgs
        ///         {
        ///             Name = "my-secret",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetSecretResult> Invoke(GetSecretInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetSecretResult>("koyeb:index/getSecret:getSecret", args ?? new GetSecretInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSecretArgs : Pulumi.InvokeArgs
    {
        [Input("azureContainerRegistry")]
        public Inputs.GetSecretAzureContainerRegistryArgs? AzureContainerRegistry { get; set; }

        [Input("digitalOceanContainerRegistry")]
        public Inputs.GetSecretDigitalOceanContainerRegistryArgs? DigitalOceanContainerRegistry { get; set; }

        [Input("dockerHubRegistry")]
        public Inputs.GetSecretDockerHubRegistryArgs? DockerHubRegistry { get; set; }

        [Input("githubRegistry")]
        public Inputs.GetSecretGithubRegistryArgs? GithubRegistry { get; set; }

        [Input("gitlabRegistry")]
        public Inputs.GetSecretGitlabRegistryArgs? GitlabRegistry { get; set; }

        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        [Input("privateRegistry")]
        public Inputs.GetSecretPrivateRegistryArgs? PrivateRegistry { get; set; }

        [Input("type")]
        public string? Type { get; set; }

        [Input("value")]
        public string? Value { get; set; }

        public GetSecretArgs()
        {
        }
    }

    public sealed class GetSecretInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("azureContainerRegistry")]
        public Input<Inputs.GetSecretAzureContainerRegistryInputArgs>? AzureContainerRegistry { get; set; }

        [Input("digitalOceanContainerRegistry")]
        public Input<Inputs.GetSecretDigitalOceanContainerRegistryInputArgs>? DigitalOceanContainerRegistry { get; set; }

        [Input("dockerHubRegistry")]
        public Input<Inputs.GetSecretDockerHubRegistryInputArgs>? DockerHubRegistry { get; set; }

        [Input("githubRegistry")]
        public Input<Inputs.GetSecretGithubRegistryInputArgs>? GithubRegistry { get; set; }

        [Input("gitlabRegistry")]
        public Input<Inputs.GetSecretGitlabRegistryInputArgs>? GitlabRegistry { get; set; }

        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("privateRegistry")]
        public Input<Inputs.GetSecretPrivateRegistryInputArgs>? PrivateRegistry { get; set; }

        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("value")]
        public Input<string>? Value { get; set; }

        public GetSecretInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetSecretResult
    {
        public readonly Outputs.GetSecretAzureContainerRegistryResult? AzureContainerRegistry;
        public readonly string CreatedAt;
        public readonly Outputs.GetSecretDigitalOceanContainerRegistryResult? DigitalOceanContainerRegistry;
        public readonly Outputs.GetSecretDockerHubRegistryResult? DockerHubRegistry;
        public readonly Outputs.GetSecretGithubRegistryResult? GithubRegistry;
        public readonly Outputs.GetSecretGitlabRegistryResult? GitlabRegistry;
        public readonly string Id;
        public readonly string Name;
        public readonly string OrganizationId;
        public readonly Outputs.GetSecretPrivateRegistryResult? PrivateRegistry;
        public readonly string? Type;
        public readonly string UpdatedAt;
        public readonly string? Value;

        [OutputConstructor]
        private GetSecretResult(
            Outputs.GetSecretAzureContainerRegistryResult? azureContainerRegistry,

            string createdAt,

            Outputs.GetSecretDigitalOceanContainerRegistryResult? digitalOceanContainerRegistry,

            Outputs.GetSecretDockerHubRegistryResult? dockerHubRegistry,

            Outputs.GetSecretGithubRegistryResult? githubRegistry,

            Outputs.GetSecretGitlabRegistryResult? gitlabRegistry,

            string id,

            string name,

            string organizationId,

            Outputs.GetSecretPrivateRegistryResult? privateRegistry,

            string? type,

            string updatedAt,

            string? value)
        {
            AzureContainerRegistry = azureContainerRegistry;
            CreatedAt = createdAt;
            DigitalOceanContainerRegistry = digitalOceanContainerRegistry;
            DockerHubRegistry = dockerHubRegistry;
            GithubRegistry = githubRegistry;
            GitlabRegistry = gitlabRegistry;
            Id = id;
            Name = name;
            OrganizationId = organizationId;
            PrivateRegistry = privateRegistry;
            Type = type;
            UpdatedAt = updatedAt;
            Value = value;
        }
    }
}
