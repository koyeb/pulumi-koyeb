// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Koyeb
{
    public static class GetSecret
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Koyeb = Pulumi.Koyeb;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_secret = Koyeb.GetSecret.Invoke(new()
        ///     {
        ///         Name = "my-secret",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetSecretResult> InvokeAsync(GetSecretArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSecretResult>("koyeb:index/getSecret:getSecret", args ?? new GetSecretArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Koyeb = Pulumi.Koyeb;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_secret = Koyeb.GetSecret.Invoke(new()
        ///     {
        ///         Name = "my-secret",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSecretResult> Invoke(GetSecretInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSecretResult>("koyeb:index/getSecret:getSecret", args ?? new GetSecretInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSecretArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Azure registry configuration to use
        /// </summary>
        [Input("azureContainerRegistry")]
        public Inputs.GetSecretAzureContainerRegistryArgs? AzureContainerRegistry { get; set; }

        /// <summary>
        /// The DigitalOcean registry configuration to use
        /// </summary>
        [Input("digitalOceanContainerRegistry")]
        public Inputs.GetSecretDigitalOceanContainerRegistryArgs? DigitalOceanContainerRegistry { get; set; }

        /// <summary>
        /// The DockerHub registry configuration to use
        /// </summary>
        [Input("dockerHubRegistry")]
        public Inputs.GetSecretDockerHubRegistryArgs? DockerHubRegistry { get; set; }

        /// <summary>
        /// The GitHub registry configuration to use
        /// </summary>
        [Input("githubRegistry")]
        public Inputs.GetSecretGithubRegistryArgs? GithubRegistry { get; set; }

        /// <summary>
        /// The GitLab registry configuration to use
        /// </summary>
        [Input("gitlabRegistry")]
        public Inputs.GetSecretGitlabRegistryArgs? GitlabRegistry { get; set; }

        /// <summary>
        /// The secret name
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The DigitalOcean registry configuration to use
        /// </summary>
        [Input("privateRegistry")]
        public Inputs.GetSecretPrivateRegistryArgs? PrivateRegistry { get; set; }

        /// <summary>
        /// The secret type
        /// </summary>
        [Input("type")]
        public string? Type { get; set; }

        [Input("value")]
        private string? _value;

        /// <summary>
        /// The secret value
        /// </summary>
        public string? Value
        {
            get => _value;
            set => _value = value;
        }

        public GetSecretArgs()
        {
        }
        public static new GetSecretArgs Empty => new GetSecretArgs();
    }

    public sealed class GetSecretInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Azure registry configuration to use
        /// </summary>
        [Input("azureContainerRegistry")]
        public Input<Inputs.GetSecretAzureContainerRegistryInputArgs>? AzureContainerRegistry { get; set; }

        /// <summary>
        /// The DigitalOcean registry configuration to use
        /// </summary>
        [Input("digitalOceanContainerRegistry")]
        public Input<Inputs.GetSecretDigitalOceanContainerRegistryInputArgs>? DigitalOceanContainerRegistry { get; set; }

        /// <summary>
        /// The DockerHub registry configuration to use
        /// </summary>
        [Input("dockerHubRegistry")]
        public Input<Inputs.GetSecretDockerHubRegistryInputArgs>? DockerHubRegistry { get; set; }

        /// <summary>
        /// The GitHub registry configuration to use
        /// </summary>
        [Input("githubRegistry")]
        public Input<Inputs.GetSecretGithubRegistryInputArgs>? GithubRegistry { get; set; }

        /// <summary>
        /// The GitLab registry configuration to use
        /// </summary>
        [Input("gitlabRegistry")]
        public Input<Inputs.GetSecretGitlabRegistryInputArgs>? GitlabRegistry { get; set; }

        /// <summary>
        /// The secret name
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The DigitalOcean registry configuration to use
        /// </summary>
        [Input("privateRegistry")]
        public Input<Inputs.GetSecretPrivateRegistryInputArgs>? PrivateRegistry { get; set; }

        /// <summary>
        /// The secret type
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("value")]
        private Input<string>? _value;

        /// <summary>
        /// The secret value
        /// </summary>
        public Input<string>? Value
        {
            get => _value;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _value = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public GetSecretInvokeArgs()
        {
        }
        public static new GetSecretInvokeArgs Empty => new GetSecretInvokeArgs();
    }


    [OutputType]
    public sealed class GetSecretResult
    {
        /// <summary>
        /// The Azure registry configuration to use
        /// </summary>
        public readonly Outputs.GetSecretAzureContainerRegistryResult? AzureContainerRegistry;
        /// <summary>
        /// The date and time of when the secret was created
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// The DigitalOcean registry configuration to use
        /// </summary>
        public readonly Outputs.GetSecretDigitalOceanContainerRegistryResult? DigitalOceanContainerRegistry;
        /// <summary>
        /// The DockerHub registry configuration to use
        /// </summary>
        public readonly Outputs.GetSecretDockerHubRegistryResult? DockerHubRegistry;
        /// <summary>
        /// The GitHub registry configuration to use
        /// </summary>
        public readonly Outputs.GetSecretGithubRegistryResult? GithubRegistry;
        /// <summary>
        /// The GitLab registry configuration to use
        /// </summary>
        public readonly Outputs.GetSecretGitlabRegistryResult? GitlabRegistry;
        /// <summary>
        /// The secret ID
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The secret name
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The organization ID owning the secret
        /// </summary>
        public readonly string OrganizationId;
        /// <summary>
        /// The DigitalOcean registry configuration to use
        /// </summary>
        public readonly Outputs.GetSecretPrivateRegistryResult? PrivateRegistry;
        /// <summary>
        /// The secret type
        /// </summary>
        public readonly string? Type;
        /// <summary>
        /// The date and time of when the secret was last updated
        /// </summary>
        public readonly string UpdatedAt;
        /// <summary>
        /// The secret value
        /// </summary>
        public readonly string? Value;

        [OutputConstructor]
        private GetSecretResult(
            Outputs.GetSecretAzureContainerRegistryResult? azureContainerRegistry,

            string createdAt,

            Outputs.GetSecretDigitalOceanContainerRegistryResult? digitalOceanContainerRegistry,

            Outputs.GetSecretDockerHubRegistryResult? dockerHubRegistry,

            Outputs.GetSecretGithubRegistryResult? githubRegistry,

            Outputs.GetSecretGitlabRegistryResult? gitlabRegistry,

            string id,

            string name,

            string organizationId,

            Outputs.GetSecretPrivateRegistryResult? privateRegistry,

            string? type,

            string updatedAt,

            string? value)
        {
            AzureContainerRegistry = azureContainerRegistry;
            CreatedAt = createdAt;
            DigitalOceanContainerRegistry = digitalOceanContainerRegistry;
            DockerHubRegistry = dockerHubRegistry;
            GithubRegistry = githubRegistry;
            GitlabRegistry = gitlabRegistry;
            Id = id;
            Name = name;
            OrganizationId = organizationId;
            PrivateRegistry = privateRegistry;
            Type = type;
            UpdatedAt = updatedAt;
            Value = value;
        }
    }
}
