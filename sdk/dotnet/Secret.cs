// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Koyeb
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Koyeb = Pulumi.Koyeb;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var simple_secret = new Koyeb.Secret("simple-secret", new()
    ///     {
    ///         Name = "secret-name",
    ///         Value = "secret-value",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [KoyebResourceType("koyeb:index/secret:Secret")]
    public partial class Secret : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The azure*container*registry configuration to use
        /// </summary>
        [Output("azureContainerRegistry")]
        public Output<Outputs.SecretAzureContainerRegistry?> AzureContainerRegistry { get; private set; } = null!;

        /// <summary>
        /// The date and time of when the secret was created
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The digital*ocean*container*registry configuration to use
        /// </summary>
        [Output("digitalOceanContainerRegistry")]
        public Output<Outputs.SecretDigitalOceanContainerRegistry?> DigitalOceanContainerRegistry { get; private set; } = null!;

        /// <summary>
        /// The docker*hub*registry configuration to use
        /// </summary>
        [Output("dockerHubRegistry")]
        public Output<Outputs.SecretDockerHubRegistry?> DockerHubRegistry { get; private set; } = null!;

        /// <summary>
        /// The github*registry configuration to use
        /// </summary>
        [Output("githubRegistry")]
        public Output<Outputs.SecretGithubRegistry?> GithubRegistry { get; private set; } = null!;

        /// <summary>
        /// The gitlab*registry configuration to use
        /// </summary>
        [Output("gitlabRegistry")]
        public Output<Outputs.SecretGitlabRegistry?> GitlabRegistry { get; private set; } = null!;

        /// <summary>
        /// The secret name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The organization ID owning the secret
        /// </summary>
        [Output("organizationId")]
        public Output<string> OrganizationId { get; private set; } = null!;

        /// <summary>
        /// The private*registry configuration to use
        /// </summary>
        [Output("privateRegistry")]
        public Output<Outputs.SecretPrivateRegistry?> PrivateRegistry { get; private set; } = null!;

        /// <summary>
        /// The secret type
        /// </summary>
        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;

        /// <summary>
        /// The date and time of when the secret was last updated
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;

        /// <summary>
        /// The secret value
        /// </summary>
        [Output("value")]
        public Output<string?> Value { get; private set; } = null!;


        /// <summary>
        /// Create a Secret resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Secret(string name, SecretArgs? args = null, CustomResourceOptions? options = null)
            : base("koyeb:index/secret:Secret", name, args ?? new SecretArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Secret(string name, Input<string> id, SecretState? state = null, CustomResourceOptions? options = null)
            : base("koyeb:index/secret:Secret", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "value",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Secret resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Secret Get(string name, Input<string> id, SecretState? state = null, CustomResourceOptions? options = null)
        {
            return new Secret(name, id, state, options);
        }
    }

    public sealed class SecretArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The azure*container*registry configuration to use
        /// </summary>
        [Input("azureContainerRegistry")]
        public Input<Inputs.SecretAzureContainerRegistryArgs>? AzureContainerRegistry { get; set; }

        /// <summary>
        /// The digital*ocean*container*registry configuration to use
        /// </summary>
        [Input("digitalOceanContainerRegistry")]
        public Input<Inputs.SecretDigitalOceanContainerRegistryArgs>? DigitalOceanContainerRegistry { get; set; }

        /// <summary>
        /// The docker*hub*registry configuration to use
        /// </summary>
        [Input("dockerHubRegistry")]
        public Input<Inputs.SecretDockerHubRegistryArgs>? DockerHubRegistry { get; set; }

        /// <summary>
        /// The github*registry configuration to use
        /// </summary>
        [Input("githubRegistry")]
        public Input<Inputs.SecretGithubRegistryArgs>? GithubRegistry { get; set; }

        /// <summary>
        /// The gitlab*registry configuration to use
        /// </summary>
        [Input("gitlabRegistry")]
        public Input<Inputs.SecretGitlabRegistryArgs>? GitlabRegistry { get; set; }

        /// <summary>
        /// The secret name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The private*registry configuration to use
        /// </summary>
        [Input("privateRegistry")]
        public Input<Inputs.SecretPrivateRegistryArgs>? PrivateRegistry { get; set; }

        /// <summary>
        /// The secret type
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("value")]
        private Input<string>? _value;

        /// <summary>
        /// The secret value
        /// </summary>
        public Input<string>? Value
        {
            get => _value;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _value = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public SecretArgs()
        {
        }
        public static new SecretArgs Empty => new SecretArgs();
    }

    public sealed class SecretState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The azure*container*registry configuration to use
        /// </summary>
        [Input("azureContainerRegistry")]
        public Input<Inputs.SecretAzureContainerRegistryGetArgs>? AzureContainerRegistry { get; set; }

        /// <summary>
        /// The date and time of when the secret was created
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// The digital*ocean*container*registry configuration to use
        /// </summary>
        [Input("digitalOceanContainerRegistry")]
        public Input<Inputs.SecretDigitalOceanContainerRegistryGetArgs>? DigitalOceanContainerRegistry { get; set; }

        /// <summary>
        /// The docker*hub*registry configuration to use
        /// </summary>
        [Input("dockerHubRegistry")]
        public Input<Inputs.SecretDockerHubRegistryGetArgs>? DockerHubRegistry { get; set; }

        /// <summary>
        /// The github*registry configuration to use
        /// </summary>
        [Input("githubRegistry")]
        public Input<Inputs.SecretGithubRegistryGetArgs>? GithubRegistry { get; set; }

        /// <summary>
        /// The gitlab*registry configuration to use
        /// </summary>
        [Input("gitlabRegistry")]
        public Input<Inputs.SecretGitlabRegistryGetArgs>? GitlabRegistry { get; set; }

        /// <summary>
        /// The secret name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The organization ID owning the secret
        /// </summary>
        [Input("organizationId")]
        public Input<string>? OrganizationId { get; set; }

        /// <summary>
        /// The private*registry configuration to use
        /// </summary>
        [Input("privateRegistry")]
        public Input<Inputs.SecretPrivateRegistryGetArgs>? PrivateRegistry { get; set; }

        /// <summary>
        /// The secret type
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The date and time of when the secret was last updated
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        [Input("value")]
        private Input<string>? _value;

        /// <summary>
        /// The secret value
        /// </summary>
        public Input<string>? Value
        {
            get => _value;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _value = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public SecretState()
        {
        }
        public static new SecretState Empty => new SecretState();
    }
}
