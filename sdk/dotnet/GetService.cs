// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Koyeb
{
    public static class GetService
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Koyeb = Pulumi.Koyeb;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_service = Koyeb.GetService.Invoke(new()
        ///     {
        ///         Slug = "my-app/my-service",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetServiceResult> InvokeAsync(GetServiceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServiceResult>("koyeb:index/getService:getService", args ?? new GetServiceArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Koyeb = Pulumi.Koyeb;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_service = Koyeb.GetService.Invoke(new()
        ///     {
        ///         Slug = "my-app/my-service",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetServiceResult> Invoke(GetServiceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServiceResult>("koyeb:index/getService:getService", args ?? new GetServiceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServiceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The status messages of the service
        /// </summary>
        [Input("messages")]
        public string? Messages { get; set; }

        /// <summary>
        /// The service slug composed of the app and service name, for instance my-app/my-service
        /// </summary>
        [Input("slug", required: true)]
        public string Slug { get; set; } = null!;

        public GetServiceArgs()
        {
        }
        public static new GetServiceArgs Empty => new GetServiceArgs();
    }

    public sealed class GetServiceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The status messages of the service
        /// </summary>
        [Input("messages")]
        public Input<string>? Messages { get; set; }

        /// <summary>
        /// The service slug composed of the app and service name, for instance my-app/my-service
        /// </summary>
        [Input("slug", required: true)]
        public Input<string> Slug { get; set; } = null!;

        public GetServiceInvokeArgs()
        {
        }
        public static new GetServiceInvokeArgs Empty => new GetServiceInvokeArgs();
    }


    [OutputType]
    public sealed class GetServiceResult
    {
        /// <summary>
        /// The service active deployment id
        /// </summary>
        public readonly string ActiveDeployment;
        /// <summary>
        /// The app id the service is assigned
        /// </summary>
        public readonly string AppId;
        /// <summary>
        /// The date and time of when the service was created
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// The id of the service
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The service latest deployment id
        /// </summary>
        public readonly string LatestDeployment;
        /// <summary>
        /// The status messages of the service
        /// </summary>
        public readonly string Messages;
        /// <summary>
        /// The name of the service
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The organization id owning the service
        /// </summary>
        public readonly string OrganizationId;
        /// <summary>
        /// The date and time of when the service was last updated
        /// </summary>
        public readonly string PausedAt;
        /// <summary>
        /// The date and time of when the service was last updated
        /// </summary>
        public readonly string ResumedAt;
        /// <summary>
        /// The service slug composed of the app and service name, for instance my-app/my-service
        /// </summary>
        public readonly string Slug;
        /// <summary>
        /// The status of the service
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// The date and time of when the service was last updated
        /// </summary>
        public readonly string TerminatedAt;
        /// <summary>
        /// The date and time of when the service was last updated
        /// </summary>
        public readonly string UpdatedAt;
        /// <summary>
        /// The version of the service
        /// </summary>
        public readonly string Version;

        [OutputConstructor]
        private GetServiceResult(
            string activeDeployment,

            string appId,

            string createdAt,

            string id,

            string latestDeployment,

            string messages,

            string name,

            string organizationId,

            string pausedAt,

            string resumedAt,

            string slug,

            string status,

            string terminatedAt,

            string updatedAt,

            string version)
        {
            ActiveDeployment = activeDeployment;
            AppId = appId;
            CreatedAt = createdAt;
            Id = id;
            LatestDeployment = latestDeployment;
            Messages = messages;
            Name = name;
            OrganizationId = organizationId;
            PausedAt = pausedAt;
            ResumedAt = resumedAt;
            Slug = slug;
            Status = status;
            TerminatedAt = terminatedAt;
            UpdatedAt = updatedAt;
            Version = version;
        }
    }
}
