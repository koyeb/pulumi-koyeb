// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package koyeb

import (
	"context"
	"reflect"

	"github.com/koyeb/pulumi-koyeb/sdk/go/koyeb/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/koyeb/pulumi-koyeb/sdk/go/koyeb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := koyeb.NewDomain(ctx, "my-domain", &koyeb.DomainArgs{
//				Name: pulumi.String("www.example.tld"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Domain struct {
	pulumi.CustomResourceState

	// The app name the domain is assigned to
	AppName pulumi.StringPtrOutput `pulumi:"appName"`
	// The date and time of when the domain was created
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The deployment group assigned to the domain
	DeploymentGroup pulumi.StringOutput `pulumi:"deploymentGroup"`
	// The CNAME record to point the domain to
	IntendedCname pulumi.StringOutput `pulumi:"intendedCname"`
	// The status messages of the domain
	Messages pulumi.StringOutput `pulumi:"messages"`
	// The domain name
	Name pulumi.StringOutput `pulumi:"name"`
	// The organization ID owning the domain
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// The status of the domain
	Status pulumi.StringOutput `pulumi:"status"`
	// The domain type
	Type pulumi.StringOutput `pulumi:"type"`
	// The date and time of when the domain was last updated
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// The date and time of when the domain was last verified
	VerifiedAt pulumi.StringOutput `pulumi:"verifiedAt"`
	// The version of the domain
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewDomain registers a new resource with the given unique name, arguments, and options.
func NewDomain(ctx *pulumi.Context,
	name string, args *DomainArgs, opts ...pulumi.ResourceOption) (*Domain, error) {
	if args == nil {
		args = &DomainArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Domain
	err := ctx.RegisterResource("koyeb:index/domain:Domain", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomain gets an existing Domain resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomain(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainState, opts ...pulumi.ResourceOption) (*Domain, error) {
	var resource Domain
	err := ctx.ReadResource("koyeb:index/domain:Domain", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Domain resources.
type domainState struct {
	// The app name the domain is assigned to
	AppName *string `pulumi:"appName"`
	// The date and time of when the domain was created
	CreatedAt *string `pulumi:"createdAt"`
	// The deployment group assigned to the domain
	DeploymentGroup *string `pulumi:"deploymentGroup"`
	// The CNAME record to point the domain to
	IntendedCname *string `pulumi:"intendedCname"`
	// The status messages of the domain
	Messages *string `pulumi:"messages"`
	// The domain name
	Name *string `pulumi:"name"`
	// The organization ID owning the domain
	OrganizationId *string `pulumi:"organizationId"`
	// The status of the domain
	Status *string `pulumi:"status"`
	// The domain type
	Type *string `pulumi:"type"`
	// The date and time of when the domain was last updated
	UpdatedAt *string `pulumi:"updatedAt"`
	// The date and time of when the domain was last verified
	VerifiedAt *string `pulumi:"verifiedAt"`
	// The version of the domain
	Version *string `pulumi:"version"`
}

type DomainState struct {
	// The app name the domain is assigned to
	AppName pulumi.StringPtrInput
	// The date and time of when the domain was created
	CreatedAt pulumi.StringPtrInput
	// The deployment group assigned to the domain
	DeploymentGroup pulumi.StringPtrInput
	// The CNAME record to point the domain to
	IntendedCname pulumi.StringPtrInput
	// The status messages of the domain
	Messages pulumi.StringPtrInput
	// The domain name
	Name pulumi.StringPtrInput
	// The organization ID owning the domain
	OrganizationId pulumi.StringPtrInput
	// The status of the domain
	Status pulumi.StringPtrInput
	// The domain type
	Type pulumi.StringPtrInput
	// The date and time of when the domain was last updated
	UpdatedAt pulumi.StringPtrInput
	// The date and time of when the domain was last verified
	VerifiedAt pulumi.StringPtrInput
	// The version of the domain
	Version pulumi.StringPtrInput
}

func (DomainState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainState)(nil)).Elem()
}

type domainArgs struct {
	// The app name the domain is assigned to
	AppName *string `pulumi:"appName"`
	// The deployment group assigned to the domain
	DeploymentGroup *string `pulumi:"deploymentGroup"`
	// The CNAME record to point the domain to
	IntendedCname *string `pulumi:"intendedCname"`
	// The status messages of the domain
	Messages *string `pulumi:"messages"`
	// The domain name
	Name *string `pulumi:"name"`
	// The date and time of when the domain was last verified
	VerifiedAt *string `pulumi:"verifiedAt"`
}

// The set of arguments for constructing a Domain resource.
type DomainArgs struct {
	// The app name the domain is assigned to
	AppName pulumi.StringPtrInput
	// The deployment group assigned to the domain
	DeploymentGroup pulumi.StringPtrInput
	// The CNAME record to point the domain to
	IntendedCname pulumi.StringPtrInput
	// The status messages of the domain
	Messages pulumi.StringPtrInput
	// The domain name
	Name pulumi.StringPtrInput
	// The date and time of when the domain was last verified
	VerifiedAt pulumi.StringPtrInput
}

func (DomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainArgs)(nil)).Elem()
}

type DomainInput interface {
	pulumi.Input

	ToDomainOutput() DomainOutput
	ToDomainOutputWithContext(ctx context.Context) DomainOutput
}

func (*Domain) ElementType() reflect.Type {
	return reflect.TypeOf((**Domain)(nil)).Elem()
}

func (i *Domain) ToDomainOutput() DomainOutput {
	return i.ToDomainOutputWithContext(context.Background())
}

func (i *Domain) ToDomainOutputWithContext(ctx context.Context) DomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainOutput)
}

// DomainArrayInput is an input type that accepts DomainArray and DomainArrayOutput values.
// You can construct a concrete instance of `DomainArrayInput` via:
//
//	DomainArray{ DomainArgs{...} }
type DomainArrayInput interface {
	pulumi.Input

	ToDomainArrayOutput() DomainArrayOutput
	ToDomainArrayOutputWithContext(context.Context) DomainArrayOutput
}

type DomainArray []DomainInput

func (DomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Domain)(nil)).Elem()
}

func (i DomainArray) ToDomainArrayOutput() DomainArrayOutput {
	return i.ToDomainArrayOutputWithContext(context.Background())
}

func (i DomainArray) ToDomainArrayOutputWithContext(ctx context.Context) DomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainArrayOutput)
}

// DomainMapInput is an input type that accepts DomainMap and DomainMapOutput values.
// You can construct a concrete instance of `DomainMapInput` via:
//
//	DomainMap{ "key": DomainArgs{...} }
type DomainMapInput interface {
	pulumi.Input

	ToDomainMapOutput() DomainMapOutput
	ToDomainMapOutputWithContext(context.Context) DomainMapOutput
}

type DomainMap map[string]DomainInput

func (DomainMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Domain)(nil)).Elem()
}

func (i DomainMap) ToDomainMapOutput() DomainMapOutput {
	return i.ToDomainMapOutputWithContext(context.Background())
}

func (i DomainMap) ToDomainMapOutputWithContext(ctx context.Context) DomainMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainMapOutput)
}

type DomainOutput struct{ *pulumi.OutputState }

func (DomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Domain)(nil)).Elem()
}

func (o DomainOutput) ToDomainOutput() DomainOutput {
	return o
}

func (o DomainOutput) ToDomainOutputWithContext(ctx context.Context) DomainOutput {
	return o
}

// The app name the domain is assigned to
func (o DomainOutput) AppName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringPtrOutput { return v.AppName }).(pulumi.StringPtrOutput)
}

// The date and time of when the domain was created
func (o DomainOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The deployment group assigned to the domain
func (o DomainOutput) DeploymentGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.DeploymentGroup }).(pulumi.StringOutput)
}

// The CNAME record to point the domain to
func (o DomainOutput) IntendedCname() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.IntendedCname }).(pulumi.StringOutput)
}

// The status messages of the domain
func (o DomainOutput) Messages() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.Messages }).(pulumi.StringOutput)
}

// The domain name
func (o DomainOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The organization ID owning the domain
func (o DomainOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// The status of the domain
func (o DomainOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The domain type
func (o DomainOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The date and time of when the domain was last updated
func (o DomainOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The date and time of when the domain was last verified
func (o DomainOutput) VerifiedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.VerifiedAt }).(pulumi.StringOutput)
}

// The version of the domain
func (o DomainOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type DomainArrayOutput struct{ *pulumi.OutputState }

func (DomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Domain)(nil)).Elem()
}

func (o DomainArrayOutput) ToDomainArrayOutput() DomainArrayOutput {
	return o
}

func (o DomainArrayOutput) ToDomainArrayOutputWithContext(ctx context.Context) DomainArrayOutput {
	return o
}

func (o DomainArrayOutput) Index(i pulumi.IntInput) DomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Domain {
		return vs[0].([]*Domain)[vs[1].(int)]
	}).(DomainOutput)
}

type DomainMapOutput struct{ *pulumi.OutputState }

func (DomainMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Domain)(nil)).Elem()
}

func (o DomainMapOutput) ToDomainMapOutput() DomainMapOutput {
	return o
}

func (o DomainMapOutput) ToDomainMapOutputWithContext(ctx context.Context) DomainMapOutput {
	return o
}

func (o DomainMapOutput) MapIndex(k pulumi.StringInput) DomainOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Domain {
		return vs[0].(map[string]*Domain)[vs[1].(string)]
	}).(DomainOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DomainInput)(nil)).Elem(), &Domain{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainArrayInput)(nil)).Elem(), DomainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainMapInput)(nil)).Elem(), DomainMap{})
	pulumi.RegisterOutputType(DomainOutput{})
	pulumi.RegisterOutputType(DomainArrayOutput{})
	pulumi.RegisterOutputType(DomainMapOutput{})
}
