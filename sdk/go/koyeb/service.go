// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package koyeb

import (
	"context"
	"reflect"

	"errors"
	"github.com/koyeb/pulumi-koyeb/sdk/go/koyeb/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/koyeb/pulumi-koyeb/sdk/go/koyeb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := koyeb.NewService(ctx, "my-service", &koyeb.ServiceArgs{
//				AppName: pulumi.Any(myApp.Name),
//				Definition: &koyeb.ServiceDefinitionArgs{
//					Name: pulumi.String("my-service"),
//					InstanceTypes: koyeb.ServiceDefinitionInstanceTypeArray{
//						&koyeb.ServiceDefinitionInstanceTypeArgs{
//							Type: pulumi.String("micro"),
//						},
//					},
//					Ports: koyeb.ServiceDefinitionPortArray{
//						&koyeb.ServiceDefinitionPortArgs{
//							Port:     pulumi.Int(3000),
//							Protocol: pulumi.String("http"),
//						},
//					},
//					Scalings: koyeb.ServiceDefinitionScalingArray{
//						&koyeb.ServiceDefinitionScalingArgs{
//							Min: pulumi.Int(1),
//							Max: pulumi.Int(1),
//						},
//					},
//					Envs: koyeb.ServiceDefinitionEnvArray{
//						&koyeb.ServiceDefinitionEnvArgs{
//							Key:   pulumi.String("FOO"),
//							Value: pulumi.String("BAR"),
//						},
//						&koyeb.ServiceDefinitionEnvArgs{
//							Key:   pulumi.String("PORT"),
//							Value: pulumi.String("3000"),
//						},
//					},
//					Routes: koyeb.ServiceDefinitionRouteArray{
//						&koyeb.ServiceDefinitionRouteArgs{
//							Path: pulumi.String("/"),
//							Port: pulumi.Int(3000),
//						},
//					},
//					Regions: pulumi.StringArray{
//						pulumi.String("fra"),
//					},
//					Docker: &koyeb.ServiceDefinitionDockerArgs{
//						Image: pulumi.String("koyeb/demo"),
//					},
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				my_app,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Service struct {
	pulumi.CustomResourceState

	// The service active deployment ID
	ActiveDeployment pulumi.StringOutput `pulumi:"activeDeployment"`
	// The app id the service is assigned to
	AppId pulumi.StringOutput `pulumi:"appId"`
	// The app name the service is assigned to
	AppName pulumi.StringOutput `pulumi:"appName"`
	// The date and time of when the service was created
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The service deployment definition
	Definition ServiceDefinitionOutput `pulumi:"definition"`
	// The service latest deployment ID
	LatestDeployment pulumi.StringOutput `pulumi:"latestDeployment"`
	// The status messages of the service
	Messages pulumi.StringOutput `pulumi:"messages"`
	// The service name
	Name pulumi.StringOutput `pulumi:"name"`
	// The organization ID owning the service
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// The date and time of when the service was last updated
	PausedAt pulumi.StringOutput `pulumi:"pausedAt"`
	// The date and time of when the service was last updated
	ResumedAt pulumi.StringOutput `pulumi:"resumedAt"`
	// The status of the service
	Status pulumi.StringOutput `pulumi:"status"`
	// The date and time of when the service was last updated
	TerminatedAt pulumi.StringOutput `pulumi:"terminatedAt"`
	// The date and time of when the service was last updated
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// The version of the service
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewService registers a new resource with the given unique name, arguments, and options.
func NewService(ctx *pulumi.Context,
	name string, args *ServiceArgs, opts ...pulumi.ResourceOption) (*Service, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppName == nil {
		return nil, errors.New("invalid value for required argument 'AppName'")
	}
	if args.Definition == nil {
		return nil, errors.New("invalid value for required argument 'Definition'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Service
	err := ctx.RegisterResource("koyeb:index/service:Service", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetService gets an existing Service resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceState, opts ...pulumi.ResourceOption) (*Service, error) {
	var resource Service
	err := ctx.ReadResource("koyeb:index/service:Service", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Service resources.
type serviceState struct {
	// The service active deployment ID
	ActiveDeployment *string `pulumi:"activeDeployment"`
	// The app id the service is assigned to
	AppId *string `pulumi:"appId"`
	// The app name the service is assigned to
	AppName *string `pulumi:"appName"`
	// The date and time of when the service was created
	CreatedAt *string `pulumi:"createdAt"`
	// The service deployment definition
	Definition *ServiceDefinition `pulumi:"definition"`
	// The service latest deployment ID
	LatestDeployment *string `pulumi:"latestDeployment"`
	// The status messages of the service
	Messages *string `pulumi:"messages"`
	// The service name
	Name *string `pulumi:"name"`
	// The organization ID owning the service
	OrganizationId *string `pulumi:"organizationId"`
	// The date and time of when the service was last updated
	PausedAt *string `pulumi:"pausedAt"`
	// The date and time of when the service was last updated
	ResumedAt *string `pulumi:"resumedAt"`
	// The status of the service
	Status *string `pulumi:"status"`
	// The date and time of when the service was last updated
	TerminatedAt *string `pulumi:"terminatedAt"`
	// The date and time of when the service was last updated
	UpdatedAt *string `pulumi:"updatedAt"`
	// The version of the service
	Version *string `pulumi:"version"`
}

type ServiceState struct {
	// The service active deployment ID
	ActiveDeployment pulumi.StringPtrInput
	// The app id the service is assigned to
	AppId pulumi.StringPtrInput
	// The app name the service is assigned to
	AppName pulumi.StringPtrInput
	// The date and time of when the service was created
	CreatedAt pulumi.StringPtrInput
	// The service deployment definition
	Definition ServiceDefinitionPtrInput
	// The service latest deployment ID
	LatestDeployment pulumi.StringPtrInput
	// The status messages of the service
	Messages pulumi.StringPtrInput
	// The service name
	Name pulumi.StringPtrInput
	// The organization ID owning the service
	OrganizationId pulumi.StringPtrInput
	// The date and time of when the service was last updated
	PausedAt pulumi.StringPtrInput
	// The date and time of when the service was last updated
	ResumedAt pulumi.StringPtrInput
	// The status of the service
	Status pulumi.StringPtrInput
	// The date and time of when the service was last updated
	TerminatedAt pulumi.StringPtrInput
	// The date and time of when the service was last updated
	UpdatedAt pulumi.StringPtrInput
	// The version of the service
	Version pulumi.StringPtrInput
}

func (ServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceState)(nil)).Elem()
}

type serviceArgs struct {
	// The app name the service is assigned to
	AppName string `pulumi:"appName"`
	// The service deployment definition
	Definition ServiceDefinition `pulumi:"definition"`
	// The status messages of the service
	Messages *string `pulumi:"messages"`
}

// The set of arguments for constructing a Service resource.
type ServiceArgs struct {
	// The app name the service is assigned to
	AppName pulumi.StringInput
	// The service deployment definition
	Definition ServiceDefinitionInput
	// The status messages of the service
	Messages pulumi.StringPtrInput
}

func (ServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceArgs)(nil)).Elem()
}

type ServiceInput interface {
	pulumi.Input

	ToServiceOutput() ServiceOutput
	ToServiceOutputWithContext(ctx context.Context) ServiceOutput
}

func (*Service) ElementType() reflect.Type {
	return reflect.TypeOf((**Service)(nil)).Elem()
}

func (i *Service) ToServiceOutput() ServiceOutput {
	return i.ToServiceOutputWithContext(context.Background())
}

func (i *Service) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceOutput)
}

// ServiceArrayInput is an input type that accepts ServiceArray and ServiceArrayOutput values.
// You can construct a concrete instance of `ServiceArrayInput` via:
//
//	ServiceArray{ ServiceArgs{...} }
type ServiceArrayInput interface {
	pulumi.Input

	ToServiceArrayOutput() ServiceArrayOutput
	ToServiceArrayOutputWithContext(context.Context) ServiceArrayOutput
}

type ServiceArray []ServiceInput

func (ServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Service)(nil)).Elem()
}

func (i ServiceArray) ToServiceArrayOutput() ServiceArrayOutput {
	return i.ToServiceArrayOutputWithContext(context.Background())
}

func (i ServiceArray) ToServiceArrayOutputWithContext(ctx context.Context) ServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceArrayOutput)
}

// ServiceMapInput is an input type that accepts ServiceMap and ServiceMapOutput values.
// You can construct a concrete instance of `ServiceMapInput` via:
//
//	ServiceMap{ "key": ServiceArgs{...} }
type ServiceMapInput interface {
	pulumi.Input

	ToServiceMapOutput() ServiceMapOutput
	ToServiceMapOutputWithContext(context.Context) ServiceMapOutput
}

type ServiceMap map[string]ServiceInput

func (ServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Service)(nil)).Elem()
}

func (i ServiceMap) ToServiceMapOutput() ServiceMapOutput {
	return i.ToServiceMapOutputWithContext(context.Background())
}

func (i ServiceMap) ToServiceMapOutputWithContext(ctx context.Context) ServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMapOutput)
}

type ServiceOutput struct{ *pulumi.OutputState }

func (ServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Service)(nil)).Elem()
}

func (o ServiceOutput) ToServiceOutput() ServiceOutput {
	return o
}

func (o ServiceOutput) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return o
}

// The service active deployment ID
func (o ServiceOutput) ActiveDeployment() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.ActiveDeployment }).(pulumi.StringOutput)
}

// The app id the service is assigned to
func (o ServiceOutput) AppId() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.AppId }).(pulumi.StringOutput)
}

// The app name the service is assigned to
func (o ServiceOutput) AppName() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.AppName }).(pulumi.StringOutput)
}

// The date and time of when the service was created
func (o ServiceOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The service deployment definition
func (o ServiceOutput) Definition() ServiceDefinitionOutput {
	return o.ApplyT(func(v *Service) ServiceDefinitionOutput { return v.Definition }).(ServiceDefinitionOutput)
}

// The service latest deployment ID
func (o ServiceOutput) LatestDeployment() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.LatestDeployment }).(pulumi.StringOutput)
}

// The status messages of the service
func (o ServiceOutput) Messages() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Messages }).(pulumi.StringOutput)
}

// The service name
func (o ServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The organization ID owning the service
func (o ServiceOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// The date and time of when the service was last updated
func (o ServiceOutput) PausedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.PausedAt }).(pulumi.StringOutput)
}

// The date and time of when the service was last updated
func (o ServiceOutput) ResumedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.ResumedAt }).(pulumi.StringOutput)
}

// The status of the service
func (o ServiceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The date and time of when the service was last updated
func (o ServiceOutput) TerminatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.TerminatedAt }).(pulumi.StringOutput)
}

// The date and time of when the service was last updated
func (o ServiceOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The version of the service
func (o ServiceOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type ServiceArrayOutput struct{ *pulumi.OutputState }

func (ServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Service)(nil)).Elem()
}

func (o ServiceArrayOutput) ToServiceArrayOutput() ServiceArrayOutput {
	return o
}

func (o ServiceArrayOutput) ToServiceArrayOutputWithContext(ctx context.Context) ServiceArrayOutput {
	return o
}

func (o ServiceArrayOutput) Index(i pulumi.IntInput) ServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Service {
		return vs[0].([]*Service)[vs[1].(int)]
	}).(ServiceOutput)
}

type ServiceMapOutput struct{ *pulumi.OutputState }

func (ServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Service)(nil)).Elem()
}

func (o ServiceMapOutput) ToServiceMapOutput() ServiceMapOutput {
	return o
}

func (o ServiceMapOutput) ToServiceMapOutputWithContext(ctx context.Context) ServiceMapOutput {
	return o
}

func (o ServiceMapOutput) MapIndex(k pulumi.StringInput) ServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Service {
		return vs[0].(map[string]*Service)[vs[1].(string)]
	}).(ServiceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceInput)(nil)).Elem(), &Service{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceArrayInput)(nil)).Elem(), ServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceMapInput)(nil)).Elem(), ServiceMap{})
	pulumi.RegisterOutputType(ServiceOutput{})
	pulumi.RegisterOutputType(ServiceArrayOutput{})
	pulumi.RegisterOutputType(ServiceMapOutput{})
}
