// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package koyeb

import (
	"context"
	"reflect"

	"errors"
	"github.com/koyeb/pulumi-koyeb/sdk/go/koyeb/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Volume struct {
	pulumi.CustomResourceState

	// The backing store of the volume
	BackingStore pulumi.StringOutput `pulumi:"backingStore"`
	// The date and time of when the volume was created
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The current size of the volume in GB
	CurSize pulumi.IntOutput `pulumi:"curSize"`
	// The maximum size of the volume in GB
	MaxSize pulumi.IntOutput `pulumi:"maxSize"`
	// The volume name
	Name pulumi.StringOutput `pulumi:"name"`
	// The organization ID owning the volume
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// If set to true, the volume will be mounted in read-only
	ReadOnly pulumi.BoolPtrOutput `pulumi:"readOnly"`
	// The region where the volume is located
	Region pulumi.StringOutput `pulumi:"region"`
	// The service ID the volume is attached to
	ServiceId pulumi.StringOutput `pulumi:"serviceId"`
	// The snapshot ID the volume was created from
	SnapshotId pulumi.StringOutput `pulumi:"snapshotId"`
	// The status of the volume
	Status pulumi.StringOutput `pulumi:"status"`
	// The date and time of when the volume was last updated
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// The volume type
	VolumeType pulumi.StringPtrOutput `pulumi:"volumeType"`
}

// NewVolume registers a new resource with the given unique name, arguments, and options.
func NewVolume(ctx *pulumi.Context,
	name string, args *VolumeArgs, opts ...pulumi.ResourceOption) (*Volume, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MaxSize == nil {
		return nil, errors.New("invalid value for required argument 'MaxSize'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Volume
	err := ctx.RegisterResource("koyeb:index/volume:Volume", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVolume gets an existing Volume resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolume(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VolumeState, opts ...pulumi.ResourceOption) (*Volume, error) {
	var resource Volume
	err := ctx.ReadResource("koyeb:index/volume:Volume", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Volume resources.
type volumeState struct {
	// The backing store of the volume
	BackingStore *string `pulumi:"backingStore"`
	// The date and time of when the volume was created
	CreatedAt *string `pulumi:"createdAt"`
	// The current size of the volume in GB
	CurSize *int `pulumi:"curSize"`
	// The maximum size of the volume in GB
	MaxSize *int `pulumi:"maxSize"`
	// The volume name
	Name *string `pulumi:"name"`
	// The organization ID owning the volume
	OrganizationId *string `pulumi:"organizationId"`
	// If set to true, the volume will be mounted in read-only
	ReadOnly *bool `pulumi:"readOnly"`
	// The region where the volume is located
	Region *string `pulumi:"region"`
	// The service ID the volume is attached to
	ServiceId *string `pulumi:"serviceId"`
	// The snapshot ID the volume was created from
	SnapshotId *string `pulumi:"snapshotId"`
	// The status of the volume
	Status *string `pulumi:"status"`
	// The date and time of when the volume was last updated
	UpdatedAt *string `pulumi:"updatedAt"`
	// The volume type
	VolumeType *string `pulumi:"volumeType"`
}

type VolumeState struct {
	// The backing store of the volume
	BackingStore pulumi.StringPtrInput
	// The date and time of when the volume was created
	CreatedAt pulumi.StringPtrInput
	// The current size of the volume in GB
	CurSize pulumi.IntPtrInput
	// The maximum size of the volume in GB
	MaxSize pulumi.IntPtrInput
	// The volume name
	Name pulumi.StringPtrInput
	// The organization ID owning the volume
	OrganizationId pulumi.StringPtrInput
	// If set to true, the volume will be mounted in read-only
	ReadOnly pulumi.BoolPtrInput
	// The region where the volume is located
	Region pulumi.StringPtrInput
	// The service ID the volume is attached to
	ServiceId pulumi.StringPtrInput
	// The snapshot ID the volume was created from
	SnapshotId pulumi.StringPtrInput
	// The status of the volume
	Status pulumi.StringPtrInput
	// The date and time of when the volume was last updated
	UpdatedAt pulumi.StringPtrInput
	// The volume type
	VolumeType pulumi.StringPtrInput
}

func (VolumeState) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeState)(nil)).Elem()
}

type volumeArgs struct {
	// The maximum size of the volume in GB
	MaxSize int `pulumi:"maxSize"`
	// The volume name
	Name *string `pulumi:"name"`
	// If set to true, the volume will be mounted in read-only
	ReadOnly *bool `pulumi:"readOnly"`
	// The region where the volume is located
	Region string `pulumi:"region"`
	// The volume type
	VolumeType *string `pulumi:"volumeType"`
}

// The set of arguments for constructing a Volume resource.
type VolumeArgs struct {
	// The maximum size of the volume in GB
	MaxSize pulumi.IntInput
	// The volume name
	Name pulumi.StringPtrInput
	// If set to true, the volume will be mounted in read-only
	ReadOnly pulumi.BoolPtrInput
	// The region where the volume is located
	Region pulumi.StringInput
	// The volume type
	VolumeType pulumi.StringPtrInput
}

func (VolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeArgs)(nil)).Elem()
}

type VolumeInput interface {
	pulumi.Input

	ToVolumeOutput() VolumeOutput
	ToVolumeOutputWithContext(ctx context.Context) VolumeOutput
}

func (*Volume) ElementType() reflect.Type {
	return reflect.TypeOf((**Volume)(nil)).Elem()
}

func (i *Volume) ToVolumeOutput() VolumeOutput {
	return i.ToVolumeOutputWithContext(context.Background())
}

func (i *Volume) ToVolumeOutputWithContext(ctx context.Context) VolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeOutput)
}

// VolumeArrayInput is an input type that accepts VolumeArray and VolumeArrayOutput values.
// You can construct a concrete instance of `VolumeArrayInput` via:
//
//	VolumeArray{ VolumeArgs{...} }
type VolumeArrayInput interface {
	pulumi.Input

	ToVolumeArrayOutput() VolumeArrayOutput
	ToVolumeArrayOutputWithContext(context.Context) VolumeArrayOutput
}

type VolumeArray []VolumeInput

func (VolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Volume)(nil)).Elem()
}

func (i VolumeArray) ToVolumeArrayOutput() VolumeArrayOutput {
	return i.ToVolumeArrayOutputWithContext(context.Background())
}

func (i VolumeArray) ToVolumeArrayOutputWithContext(ctx context.Context) VolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeArrayOutput)
}

// VolumeMapInput is an input type that accepts VolumeMap and VolumeMapOutput values.
// You can construct a concrete instance of `VolumeMapInput` via:
//
//	VolumeMap{ "key": VolumeArgs{...} }
type VolumeMapInput interface {
	pulumi.Input

	ToVolumeMapOutput() VolumeMapOutput
	ToVolumeMapOutputWithContext(context.Context) VolumeMapOutput
}

type VolumeMap map[string]VolumeInput

func (VolumeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Volume)(nil)).Elem()
}

func (i VolumeMap) ToVolumeMapOutput() VolumeMapOutput {
	return i.ToVolumeMapOutputWithContext(context.Background())
}

func (i VolumeMap) ToVolumeMapOutputWithContext(ctx context.Context) VolumeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeMapOutput)
}

type VolumeOutput struct{ *pulumi.OutputState }

func (VolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Volume)(nil)).Elem()
}

func (o VolumeOutput) ToVolumeOutput() VolumeOutput {
	return o
}

func (o VolumeOutput) ToVolumeOutputWithContext(ctx context.Context) VolumeOutput {
	return o
}

// The backing store of the volume
func (o VolumeOutput) BackingStore() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.BackingStore }).(pulumi.StringOutput)
}

// The date and time of when the volume was created
func (o VolumeOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The current size of the volume in GB
func (o VolumeOutput) CurSize() pulumi.IntOutput {
	return o.ApplyT(func(v *Volume) pulumi.IntOutput { return v.CurSize }).(pulumi.IntOutput)
}

// The maximum size of the volume in GB
func (o VolumeOutput) MaxSize() pulumi.IntOutput {
	return o.ApplyT(func(v *Volume) pulumi.IntOutput { return v.MaxSize }).(pulumi.IntOutput)
}

// The volume name
func (o VolumeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The organization ID owning the volume
func (o VolumeOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// If set to true, the volume will be mounted in read-only
func (o VolumeOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.BoolPtrOutput { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// The region where the volume is located
func (o VolumeOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The service ID the volume is attached to
func (o VolumeOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.ServiceId }).(pulumi.StringOutput)
}

// The snapshot ID the volume was created from
func (o VolumeOutput) SnapshotId() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.SnapshotId }).(pulumi.StringOutput)
}

// The status of the volume
func (o VolumeOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The date and time of when the volume was last updated
func (o VolumeOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The volume type
func (o VolumeOutput) VolumeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringPtrOutput { return v.VolumeType }).(pulumi.StringPtrOutput)
}

type VolumeArrayOutput struct{ *pulumi.OutputState }

func (VolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Volume)(nil)).Elem()
}

func (o VolumeArrayOutput) ToVolumeArrayOutput() VolumeArrayOutput {
	return o
}

func (o VolumeArrayOutput) ToVolumeArrayOutputWithContext(ctx context.Context) VolumeArrayOutput {
	return o
}

func (o VolumeArrayOutput) Index(i pulumi.IntInput) VolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Volume {
		return vs[0].([]*Volume)[vs[1].(int)]
	}).(VolumeOutput)
}

type VolumeMapOutput struct{ *pulumi.OutputState }

func (VolumeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Volume)(nil)).Elem()
}

func (o VolumeMapOutput) ToVolumeMapOutput() VolumeMapOutput {
	return o
}

func (o VolumeMapOutput) ToVolumeMapOutputWithContext(ctx context.Context) VolumeMapOutput {
	return o
}

func (o VolumeMapOutput) MapIndex(k pulumi.StringInput) VolumeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Volume {
		return vs[0].(map[string]*Volume)[vs[1].(string)]
	}).(VolumeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeInput)(nil)).Elem(), &Volume{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeArrayInput)(nil)).Elem(), VolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeMapInput)(nil)).Elem(), VolumeMap{})
	pulumi.RegisterOutputType(VolumeOutput{})
	pulumi.RegisterOutputType(VolumeArrayOutput{})
	pulumi.RegisterOutputType(VolumeMapOutput{})
}
